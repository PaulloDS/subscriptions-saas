// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  password           String
  isHeadOfFamily     Boolean             @default(false)
  familyHeadId       String?
  familyHead         User?               @relation("FamilyMembers", fields: [familyHeadId], references: [id])
  familyMembers      User[]              @relation("FamilyMembers")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subscriptions      Subscription[]
  sharedSubscriptions SharedSubscription[]
  sentInvitations    Invitation[]        @relation("SentInvitations")
  receivedInvitations Invitation[]       @relation("ReceivedInvitations")
}

model Subscription {
  id               String              @id @default(cuid())
  name             String
  description      String?
  price            Float
  billingCycle     String
  category         String
  status           String
  nextBillingDate  DateTime
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  userId           String
  user             User                @relation(fields: [userId], references: [id])
  sharedSubscriptions SharedSubscription[]

  Invitation Invitation[]
}

model SharedSubscription {
  id               String       @id @default(cuid())
  subscriptionId   String
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  sharePercentage  Float
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Invitation {
  id               String       @id @default(cuid())
  senderId         String
  sender           User         @relation("SentInvitations", fields: [senderId], references: [id])
  receiverId       String
  receiver         User         @relation("ReceivedInvitations", fields: [receiverId], references: [id])
  subscriptionId   String
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  status           String       @default("pending")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

